import { promises as fs } from 'fs';
import path from 'path';
import { CasinoConfig, CasinoMetadata } from '../types';
import { getCasinoPath } from './git';

const CONFIG_FILE = 'fare.config.json';
const ENV_FILE = '.env';

/**
 * Save casino configuration to fare.config.json
 */
export async function saveCasinoConfig(
  casinoName: string,
  config: CasinoConfig
): Promise<void> {
  const casinoPath = getCasinoPath(casinoName);
  const configPath = path.join(casinoPath, CONFIG_FILE);

  const metadata: CasinoMetadata = {
    casinoName: config.casinoName,
    createdAt: new Date().toISOString(),
    deploymentPath: casinoPath,
  };

  try {
    await fs.writeFile(configPath, JSON.stringify(metadata, null, 2), 'utf-8');
  } catch (error) {
    throw new Error(`Failed to save configuration: ${error}`);
  }
}

/**
 * Load casino configuration from fare.config.json
 */
export async function loadCasinoConfig(casinoPath: string): Promise<CasinoMetadata> {
  const configPath = path.join(casinoPath, CONFIG_FILE);

  try {
    const content = await fs.readFile(configPath, 'utf-8');
    return JSON.parse(content);
  } catch (error) {
    throw new Error(`Failed to load configuration: ${error}`);
  }
}

/**
 * Generate .env file from configuration
 */
export async function generateEnvFile(
  casinoName: string,
  config: CasinoConfig
): Promise<void> {
  const casinoPath = getCasinoPath(casinoName);
  const envPath = path.join(casinoPath, ENV_FILE);

  const envContent = `# Fare Casino Environment Configuration
# Generated by fare-terminal on ${new Date().toISOString()}

# Casino Information
CASINO_NAME=${config.casinoName}

# Solana Configuration
SOLANA_RPC_URL=${config.solanaRpcUrl}
CASINO_OWNER_WALLET=${config.ownerWallet}

# Security
JWT_SECRET=${config.jwtSecret}

# Database (to be configured after Fly.io provisioning)
${config.postgresUrl ? `DATABASE_URL=${config.postgresUrl}` : '# DATABASE_URL=<will be set after Fly.io provisioning>'}

# Redis (to be configured after Fly.io provisioning)
${config.redisUrl ? `REDIS_URL=${config.redisUrl}` : '# REDIS_URL=<will be set after Fly.io provisioning>'}

# Node Environment
NODE_ENV=production

# Server Configuration
PORT=8080
HOST=0.0.0.0
`;

  try {
    await fs.writeFile(envPath, envContent, 'utf-8');
  } catch (error) {
    throw new Error(`Failed to generate .env file: ${error}`);
  }
}

/**
 * Check if we're in a valid casino directory
 */
export async function isValidCasinoDirectory(dir: string = process.cwd()): Promise<boolean> {
  const configPath = path.join(dir, CONFIG_FILE);
  try {
    await fs.access(configPath);
    return true;
  } catch {
    return false;
  }
}

/**
 * Get current casino directory
 */
export async function getCurrentCasinoPath(): Promise<string> {
  const cwd = process.cwd();
  
  if (await isValidCasinoDirectory(cwd)) {
    return cwd;
  }

  throw new Error(
    'Not in a casino directory. Please run this command from a casino directory or use "fare init" to create a new casino.'
  );
}

